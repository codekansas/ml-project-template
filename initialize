#!/usr/bin/env python
"""Runs the project initialization."""

import argparse
import re
import shutil
import sys
from pathlib import Path
from typing import Callable, cast

# Regex matching valid Python module names.
NAME_REGEX = re.compile(r"^[a-zA-Z_][a-zA-Z0-9_]*$")


def show_success(msg: str) -> None:
    print(f"\033[1;32m{msg}\033[0m")


def show_dry_run(msg: str) -> None:
    print(f"\033[1;33m{msg}\033[0m")


def show_warning(msg: str, bold: bool = False) -> None:
    print(f"\033[{'1;' if bold else ''}31m{msg}\033[0m")


def is_valid_name(name: str) -> bool:
    if NAME_REGEX.match(name) is None:
        show_warning(f"'{name}' is not a valid project name")
        return False
    return True


def read_input(
    prompt: str,
    pre: str | None = None,
    post: str | None = None,
    success_func: Callable[[str], bool] = lambda _: True,
) -> str:
    prompt_str = f"{pre}\033[36m{prompt}\033[0m{post} "
    s = input(prompt_str).strip()
    if s.lower() in ("q", "quit"):
        show_warning("Quitting")
        sys.exit(0)
    while not success_func(s):
        s = input(prompt_str).strip()
        if s.lower() in ("q", "quit"):
            show_warning("Quitting")
            sys.exit(0)
    return s


def read_yes_no(prompt: str, pre: str | None = None) -> bool:
    return read_input(prompt, pre, "? [y/n]", lambda s: s.lower() in ("y", "n")).lower() == "y"


def rename_setup_py(use_cpp: bool, dry_run: bool) -> None:
    # Renames the right setup.py file.
    setup_py_name = "setup_cpp.py" if use_cpp else "setup_no_cpp.py"
    root_dir = Path(__file__).parent.resolve()
    new_setup_py = root_dir / setup_py_name

    setup_py = root_dir / "setup.py"
    if setup_py.exists():
        setup_py.unlink()

    if new_setup_py.exists():
        if dry_run:
            show_dry_run(f"Renaming {setup_py_name} to setup.py")
            # Creates a temporary symlink.
            setup_py.symlink_to(new_setup_py)
        else:
            new_setup_py.rename(setup_py)
    else:
        show_warning(f"Can't find {setup_py_name}")

    # Removes the other setup.py file.
    other_setup_py_name = "setup_no_cpp.py" if use_cpp else "setup_cpp.py"
    other_setup_py = root_dir / other_setup_py_name
    if other_setup_py.exists():
        if dry_run:
            show_dry_run(f"Removing {other_setup_py_name}")
        else:
            other_setup_py.unlink()
    else:
        show_warning(f"Can't find {other_setup_py_name}")

    # Removes .github/workflows/core-checks.yml and replaces with .github/workflows/core-checks.yml.project
    core_checks = root_dir / ".github" / "workflows" / "core-checks.yml"
    core_checks_project = root_dir / ".github" / "workflows" / "core-checks.yml.project"
    if core_checks.exists():
        if dry_run:
            show_dry_run("Removing core-checks.yml")
        else:
            core_checks.unlink()
    else:
        show_warning("Can't find core-checks.yml")

    if core_checks_project.exists():
        if dry_run:
            show_dry_run("Renaming core-checks.yml.project to core-checks.yml")
        else:
            core_checks_project.rename(core_checks)
    else:
        show_warning("Can't find core-checks.yml.project")

    # Removes `project/cpp` subdirectory and `tests/test_cpp_extension.py` if `use_cpp` is False.
    if not use_cpp:
        cpp_dir = root_dir / "project" / "cpp"
        if cpp_dir.exists():
            if dry_run:
                show_dry_run("Removing C++ subdirectory")
            else:
                shutil.rmtree(cpp_dir)
        else:
            show_warning("Can't find C++ subdirectory")

        test_cpp_extension = root_dir / "tests" / "test_cpp_extension.py"
        if test_cpp_extension.exists():
            if dry_run:
                show_dry_run("Removing C++ test")
            else:
                test_cpp_extension.unlink()
        else:
            show_warning("Can't find C++ test")


def update_project_name(from_str: str, to_str: str, file_path: Path, dry_run: bool) -> None:
    if file_path.exists():
        if dry_run:
            show_dry_run(f"Updating project name in {file_path}")
        else:
            with open(file_path, "r", encoding="utf-8") as f:
                file_content = f.read()
            file_content = file_content.replace(from_str, to_str)
            with open(file_path, "w", encoding="utf-8") as f:
                f.write(file_content)
    else:
        show_warning(f"Can't find {file_path}")


def rename_project(new_name: str, dry_run: bool) -> None:
    # Renames project root directory.
    root_dir = Path(__file__).parent.resolve()
    if (project_root := root_dir / "project").exists():
        if dry_run:
            show_dry_run(f"Renaming project root to '{new_name}'")
        else:
            project_root.rename(root_dir / new_name)
    else:
        show_warning(f"Can't find project root in {project_root}")

    # Replaces `project.scripts.cli` with `{new_name}.scripts.cli` in `setup.cfg`.
    setup_cfg = root_dir / "setup.cfg"
    update_project_name("project.scripts.cli", f"{new_name}.scripts.cli", setup_cfg, dry_run)

    # Replaces PROJECT_NAME = "project" with PROJECT_NAME = "{new_name}" in `setup.py`.
    setup_py = root_dir / "setup.py"
    update_project_name('PROJECT_NAME = "project"', f'PROJECT_NAME = "{new_name}"', setup_py, dry_run)

    # Replaces known-first-party = ["project", "tests"] in `pyproject.toml``.
    pyproject_toml = root_dir / "pyproject.toml"
    update_project_name(
        'known-first-party = ["project", "tests"]',
        f'known-first-party = ["{new_name}", "tests"]',
        pyproject_toml,
        dry_run,
    )


def remove_init(remove: bool, dry_run: bool) -> None:
    if not remove:
        return

    init_path = Path(__file__).resolve().relative_to(Path.cwd())
    if dry_run:
        show_dry_run(f"Removing {init_path}")
    else:
        init_path.unlink()


def remove_setup_symlink(dry_run: bool) -> None:
    if not dry_run:
        return

    setup_py_file = Path(__file__).parent.resolve() / "setup.py"
    if setup_py_file.is_symlink():
        show_dry_run(f"Removing temporary symlink to {setup_py_file}")
        setup_py_file.unlink()


def main() -> None:
    parser = argparse.ArgumentParser(description="Initializes a new project")
    parser.add_argument(
        "-n",
        "--name",
        type=str,
        default=None,
        help="Project name",
    )
    parser.add_argument(
        "-c",
        "--use-cpp-backend",
        type=str,
        choices=["true", "false"],
        default=None,
        help="Use C++ backend",
    )
    parser.add_argument(
        "-r",
        "--remove-init",
        type=str,
        choices=["true", "false"],
        default=None,
        help="Remove initialize script",
    )
    parser.add_argument(
        "-d",
        "--dry-run",
        default=False,
        action="store_true",
        help="Dry run",
    )
    args = parser.parse_args()

    name = cast(str | None, args.name)
    use_cpp = cast(bool | None, None if args.use_cpp_backend is None else args.use_cpp_backend.lower() == "true")
    rm_init = cast(bool | None, None if args.remove_init is None else args.remove_init.lower() == "true")
    dry_run = cast(bool, args.dry_run)

    if name is not None and not is_valid_name(name):
        show_warning(f"Invalid project name: {name}", bold=True)
        sys.exit(1)

    rename_setup_py(read_yes_no("C++ backend", "Requires ") if use_cpp is None else use_cpp, dry_run)
    rename_project(read_input("project name", "New ", ":", is_valid_name) if name is None else name, dry_run)
    remove_init(read_yes_no("initialize script", "Remove ") if rm_init is None else rm_init, dry_run)
    remove_setup_symlink(dry_run)
    show_success("Done!")


if __name__ == "__main__":
    main()
